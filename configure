#!/bin/sh
#############################################################################
##
## Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
## All rights reserved.
## Contact: Nokia Corporation (qt-info@nokia.com)
##
## This file is the build configuration utility of the Qt Toolkit.
##
## $QT_BEGIN_LICENSE:LGPL$
## No Commercial Usage
## This file contains pre-release code and may not be distributed.
## You may use this file in accordance with the terms and conditions
## contained in the Technology Preview License Agreement accompanying
## this package.
##
## GNU Lesser General Public License Usage
## Alternatively, this file may be used under the terms of the GNU Lesser
## General Public License version 2.1 as published by the Free Software
## Foundation and appearing in the file LICENSE.LGPL included in the
## packaging of this file.  Please review the following information to
## ensure the GNU Lesser General Public License version 2.1 requirements
## will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
##
## In addition, as a special exception, Nokia gives you certain additional
## rights.  These rights are described in the Nokia Qt LGPL Exception
## version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
##
## If you have questions regarding the use of this file, please contact
## Nokia at qt-info@nokia.com.
##
##
##
##
##
##
##
##
## $QT_END_LICENSE$
##
#############################################################################

#-------------------------------------------------------------------------------
# script initialization
#-------------------------------------------------------------------------------

# the directory of this script is the "source tree"
relpath=`dirname $0`
relpath=`(cd "$relpath"; /bin/pwd)`
# the current directory is the "build tree" or "object tree"
outpath=`/bin/pwd`
# FIXME: full support for "shadow builds" is not yet here
unixtests="$relpath/config.tests/unix"
WHICH="$unixtests/which.test"

QMAKE_VARS_FILE=.qmake.vars
:> "$QMAKE_VARS_FILE"

# default flags for SPARQL drivers (can get changed later)
QT_CFLAGS_ENDPOINT=
QT_CFLAGS_TRACKER=
QT_LFLAGS_ODBC="-lodbc"

OPT_VERBOSE=no

# find a make command
if [ -z "$MAKE" ]; then
    MAKE=
    for mk in gmake make; do
        if "$WHICH" $mk >/dev/null 2>&1; then
            MAKE=`"$WHICH" $mk`
            break
        fi
    done
    if [ -z "$MAKE" ]; then
        echo >&2 "You don't seem to have 'make' or 'gmake' in your PATH."
        echo >&2 "Cannot proceed."
        exit 1
    fi
    # export MAKE, we need it later in the config.tests
    export MAKE
fi

# read which sparql drivers we have in the source code tree
CFG_SPARQL_AVAILABLE=
if [ -d "$relpath/src/plugins/sparqldrivers" ]; then
  for a in "$relpath/src/plugins/sparqldrivers/"*; do
     if [ -d "$a" ]; then
	 base_a=`basename "$a"`
  	 CFG_SPARQL_AVAILABLE="${CFG_SPARQL_AVAILABLE} ${base_a}"
	 eval "CFG_SPARQL_${base_a}=auto"
     fi
  done
fi

# detect which SPARQL drivers we can build
# CFG_SPARQL_driver=plugin -> we'll build the driver as a plugin
# CFG_SPARQL_driver=qt -> we'll embed the driver into QtSparql library
# (this option is not yet honored by the build system)
# CFG_SPARQL=no (or empty) -> we don't build that driver at all
for _SPARQLDR in $CFG_SPARQL_AVAILABLE; do
        case $_SPARQLDR in
        tracker)
            if [ "$CFG_SPARQL_tracker" != "no" ]; then
                QT_LFLAGS_TRACKER=
                if [ "$CFG_SPARQL_tracker" = "auto" ]; then
                     CFG_SPARQL_tracker=plugin
                fi
            fi
            ;;

        endpoint)
            if [ "$CFG_SPARQL_endpoint" != "no" ]; then
                QT_LFLAGS_ENDPOINT=
                if [ "$CFG_SPARQL_endpoint" = "auto" ]; then
                     CFG_SPARQL_endpoint=plugin
                fi
            fi
            ;;

        virtuoso)
            if [ "$CFG_SPARQL_virtuoso" != "no" ]; then
                if [ "$PLATFORM_MAC" != "yes" ] && "$unixtests/compile.test" "$XQMAKESPEC" "$QMAKE_CONFIG" $OPT_VERBOSE "$relpath" "$outpath" config.tests/unix/odbc "ODBC" $L_FLAGS $I_FLAGS $l_FLAGS $MAC_CONFIG_TEST_COMMANDLINE; then
                    if [ "$CFG_SPARQL_virtuoso" = "auto" ]; then
                        CFG_SPARQL_virtuoso=plugin
                    fi
                else
                    if "$unixtests/compile.test" "$XQMAKESPEC" "$QMAKE_CONFIG" $OPT_VERBOSE "$relpath" "$outpath" config.tests/unix/iodbc "iODBC" $L_FLAGS $I_FLAGS $l_FLAGS $MAC_CONFIG_TEST_COMMANDLINE; then
                        QT_LFLAGS_ODBC="-liodbc"
                        if [ "$CFG_SPARQL_virtuoso" = "auto" ]; then
                            CFG_SPARQL_virtuoso=plugin
                        fi
                    else
                        if [ "$CFG_SPARQL_virtuoso" != "auto" ] && [ "$CFG_CONFIGURE_EXIT_ON_ERROR" = "yes" ]; then
                            echo "Virtuoso SPARQL support cannot be enabled due to functionality tests!"
                            echo " Turn on verbose messaging (-v) to $0 to see the final report."
                            echo " If you believe this message is in error you may use the continue"
                            echo " switch (-continue) to $0 to continue."
                            exit 101
                        else
                            CFG_SPARQL_virtuoso=no
                        fi
                    fi
                fi
            fi
            ;;

        *)
            if [ "$OPT_VERBOSE" = "yes" ]; then
                echo "unknown SPARQL driver: $_SPARQLDR"
            fi
            ;;
        esac
done

# read which drivers were really buildable
for DRIVER in $CFG_SPARQL_AVAILABLE; do
    eval "VAL=\$CFG_SPARQL_$DRIVER"
    case "$VAL" in
    qt)
        ONDRIVER=`echo $DRIVER | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
        QCONFIG_FLAGS="$QCONFIG_FLAGS QT_SPARQL_$ONDRIVER"
        SPARQL_DRIVERS="$SPARQL_DRIVERS $DRIVER"
    ;;
    plugin)
        SPARQL_PLUGINS="$SPARQL_PLUGINS $DRIVER"
    ;;
    esac
done

# write that info down for qmake
echo "sparql-drivers =" "$SPARQL_DRIVERS" >> "$QMAKE_VARS_FILE"
echo "sparql-plugins =" "$SPARQL_PLUGINS" >> "$QMAKE_VARS_FILE"

# create the cache file (simplified)
CACHEFILE="$outpath/.qmake.cache"
mv -f "$QMAKE_VARS_FILE" "$CACHEFILE"

# create / copy header files to include/
QTDIR=. bin/syncqt

